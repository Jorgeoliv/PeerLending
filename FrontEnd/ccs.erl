%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.1
-module(ccs).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_TipoMensagem/1, enum_value_by_symbol_TipoMensagem/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("ccs.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'TipoMensagem'() :: 'LEILAO' | 'EMISSAO'.
-export_type(['TipoMensagem'/0]).

%% message types
-type 'Autenticacao'() :: #'Autenticacao'{}.

-type 'RespostaAutenticacao'() :: #'RespostaAutenticacao'{}.

-type 'MensagemEmpresa'() :: #'MensagemEmpresa'{}.

-type 'CriacaoLeilao'() :: #'CriacaoLeilao'{}.

-type 'EmissaoTaxaFixa'() :: #'EmissaoTaxaFixa'{}.

-type 'MensagemInvestidor'() :: #'MensagemInvestidor'{}.

-type 'LicitacaoLeilao'() :: #'LicitacaoLeilao'{}.

-type 'SubscricaoTaxaFixa'() :: #'SubscricaoTaxaFixa'{}.

-type 'NotificacaoUltrapassado'() :: #'NotificacaoUltrapassado'{}.

-type 'Resultado'() :: #'Resultado'{}.

-export_type(['Autenticacao'/0, 'RespostaAutenticacao'/0, 'MensagemEmpresa'/0, 'CriacaoLeilao'/0, 'EmissaoTaxaFixa'/0, 'MensagemInvestidor'/0, 'LicitacaoLeilao'/0, 'SubscricaoTaxaFixa'/0, 'NotificacaoUltrapassado'/0, 'Resultado'/0]).

-spec encode_msg(#'Autenticacao'{} | #'RespostaAutenticacao'{} | #'MensagemEmpresa'{} | #'CriacaoLeilao'{} | #'EmissaoTaxaFixa'{} | #'MensagemInvestidor'{} | #'LicitacaoLeilao'{} | #'SubscricaoTaxaFixa'{} | #'NotificacaoUltrapassado'{} | #'Resultado'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Autenticacao'{} | #'RespostaAutenticacao'{} | #'MensagemEmpresa'{} | #'CriacaoLeilao'{} | #'EmissaoTaxaFixa'{} | #'MensagemInvestidor'{} | #'LicitacaoLeilao'{} | #'SubscricaoTaxaFixa'{} | #'NotificacaoUltrapassado'{} | #'Resultado'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Autenticacao'{} | #'RespostaAutenticacao'{} | #'MensagemEmpresa'{} | #'CriacaoLeilao'{} | #'EmissaoTaxaFixa'{} | #'MensagemInvestidor'{} | #'LicitacaoLeilao'{} | #'SubscricaoTaxaFixa'{} | #'NotificacaoUltrapassado'{} | #'Resultado'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Autenticacao' ->
	  encode_msg_Autenticacao(id(Msg, TrUserData),
				  TrUserData);
      'RespostaAutenticacao' ->
	  encode_msg_RespostaAutenticacao(id(Msg, TrUserData),
					  TrUserData);
      'MensagemEmpresa' ->
	  encode_msg_MensagemEmpresa(id(Msg, TrUserData),
				     TrUserData);
      'CriacaoLeilao' ->
	  encode_msg_CriacaoLeilao(id(Msg, TrUserData),
				   TrUserData);
      'EmissaoTaxaFixa' ->
	  encode_msg_EmissaoTaxaFixa(id(Msg, TrUserData),
				     TrUserData);
      'MensagemInvestidor' ->
	  encode_msg_MensagemInvestidor(id(Msg, TrUserData),
					TrUserData);
      'LicitacaoLeilao' ->
	  encode_msg_LicitacaoLeilao(id(Msg, TrUserData),
				     TrUserData);
      'SubscricaoTaxaFixa' ->
	  encode_msg_SubscricaoTaxaFixa(id(Msg, TrUserData),
					TrUserData);
      'NotificacaoUltrapassado' ->
	  encode_msg_NotificacaoUltrapassado(id(Msg, TrUserData),
					     TrUserData);
      'Resultado' ->
	  encode_msg_Resultado(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Autenticacao(Msg, TrUserData) ->
    encode_msg_Autenticacao(Msg, <<>>, TrUserData).


encode_msg_Autenticacao(#'Autenticacao'{username = F1,
					password = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_RespostaAutenticacao(Msg, TrUserData) ->
    encode_msg_RespostaAutenticacao(Msg, <<>>, TrUserData).


encode_msg_RespostaAutenticacao(#'RespostaAutenticacao'{sucesso
							    = F1,
							papel = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	   end
    end.

encode_msg_MensagemEmpresa(Msg, TrUserData) ->
    encode_msg_MensagemEmpresa(Msg, <<>>, TrUserData).


encode_msg_MensagemEmpresa(#'MensagemEmpresa'{tipo = F1,
					      leilao = F2, emissao = F3,
					      utilizador = F4},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_TipoMensagem(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_MensagemEmpresa_leilao(TrF2, <<B1/binary, 18>>,
						  TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_MensagemEmpresa_emissao(TrF3,
						   <<B2/binary, 26>>,
						   TrUserData)
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
    end.

encode_msg_CriacaoLeilao(Msg, TrUserData) ->
    encode_msg_CriacaoLeilao(Msg, <<>>, TrUserData).


encode_msg_CriacaoLeilao(#'CriacaoLeilao'{montante = F1,
					  taxa = F2},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
    end.

encode_msg_EmissaoTaxaFixa(Msg, TrUserData) ->
    encode_msg_EmissaoTaxaFixa(Msg, <<>>, TrUserData).


encode_msg_EmissaoTaxaFixa(#'EmissaoTaxaFixa'{montante =
						  F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_MensagemInvestidor(Msg, TrUserData) ->
    encode_msg_MensagemInvestidor(Msg, <<>>, TrUserData).


encode_msg_MensagemInvestidor(#'MensagemInvestidor'{tipo
							= F1,
						    leilao = F2, emissao = F3,
						    utilizador = F4},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_TipoMensagem(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_MensagemInvestidor_leilao(TrF2,
						     <<B1/binary, 18>>,
						     TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_MensagemInvestidor_emissao(TrF3,
						      <<B2/binary, 26>>,
						      TrUserData)
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
    end.

encode_msg_LicitacaoLeilao(Msg, TrUserData) ->
    encode_msg_LicitacaoLeilao(Msg, <<>>, TrUserData).


encode_msg_LicitacaoLeilao(#'LicitacaoLeilao'{empresa =
						  F1,
					      montante = F2, taxa = F3},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
    end.

encode_msg_SubscricaoTaxaFixa(Msg, TrUserData) ->
    encode_msg_SubscricaoTaxaFixa(Msg, <<>>, TrUserData).


encode_msg_SubscricaoTaxaFixa(#'SubscricaoTaxaFixa'{empresa
							= F1,
						    montante = F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_NotificacaoUltrapassado(Msg, TrUserData) ->
    encode_msg_NotificacaoUltrapassado(Msg, <<>>,
				       TrUserData).


encode_msg_NotificacaoUltrapassado(#'NotificacaoUltrapassado'{tipo
								  = F1,
							      taxa = F2,
							      valor = F3,
							      mensagem = F4},
				   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_TipoMensagem(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	   end
    end.

encode_msg_Resultado(Msg, TrUserData) ->
    encode_msg_Resultado(Msg, <<>>, TrUserData).


encode_msg_Resultado(#'Resultado'{tipo = F1,
				  empresa = F2, texto = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_TipoMensagem(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

e_mfield_MensagemEmpresa_leilao(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_CriacaoLeilao(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MensagemEmpresa_emissao(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_EmissaoTaxaFixa(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MensagemInvestidor_leilao(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_LicitacaoLeilao(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MensagemInvestidor_emissao(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_SubscricaoTaxaFixa(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_TipoMensagem('LEILAO', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_TipoMensagem('EMISSAO', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_TipoMensagem(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Autenticacao', Bin, TrUserData) ->
    id(decode_msg_Autenticacao(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('RespostaAutenticacao', Bin,
		  TrUserData) ->
    id(decode_msg_RespostaAutenticacao(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MensagemEmpresa', Bin, TrUserData) ->
    id(decode_msg_MensagemEmpresa(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('CriacaoLeilao', Bin, TrUserData) ->
    id(decode_msg_CriacaoLeilao(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('EmissaoTaxaFixa', Bin, TrUserData) ->
    id(decode_msg_EmissaoTaxaFixa(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MensagemInvestidor', Bin,
		  TrUserData) ->
    id(decode_msg_MensagemInvestidor(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LicitacaoLeilao', Bin, TrUserData) ->
    id(decode_msg_LicitacaoLeilao(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('SubscricaoTaxaFixa', Bin,
		  TrUserData) ->
    id(decode_msg_SubscricaoTaxaFixa(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('NotificacaoUltrapassado', Bin,
		  TrUserData) ->
    id(decode_msg_NotificacaoUltrapassado(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Resultado', Bin, TrUserData) ->
    id(decode_msg_Resultado(Bin, TrUserData), TrUserData).



decode_msg_Autenticacao(Bin, TrUserData) ->
    dfp_read_field_def_Autenticacao(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Autenticacao(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_Autenticacao_username(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_Autenticacao(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_Autenticacao_password(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_Autenticacao(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'Autenticacao'{username = F@_1, password = F@_2};
dfp_read_field_def_Autenticacao(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_Autenticacao(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_Autenticacao(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Autenticacao(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_Autenticacao(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Autenticacao_username(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  d_field_Autenticacao_password(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Autenticacao(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_Autenticacao(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_Autenticacao(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_Autenticacao(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_Autenticacao(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Autenticacao(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'Autenticacao'{username = F@_1, password = F@_2}.

d_field_Autenticacao_username(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Autenticacao_username(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_Autenticacao_username(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Autenticacao(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_Autenticacao_password(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Autenticacao_password(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_Autenticacao_password(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Autenticacao(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_Autenticacao(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_Autenticacao(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_Autenticacao(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Autenticacao(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_Autenticacao(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Autenticacao(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_Autenticacao(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Autenticacao(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_Autenticacao(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Autenticacao(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_Autenticacao(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Autenticacao(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_Autenticacao(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Autenticacao(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_RespostaAutenticacao(Bin, TrUserData) ->
    dfp_read_field_def_RespostaAutenticacao(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_RespostaAutenticacao(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_RespostaAutenticacao_sucesso(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_RespostaAutenticacao(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_RespostaAutenticacao_papel(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_RespostaAutenticacao(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #'RespostaAutenticacao'{sucesso = F@_1, papel = F@_2};
dfp_read_field_def_RespostaAutenticacao(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_RespostaAutenticacao(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_RespostaAutenticacao(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RespostaAutenticacao(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_RespostaAutenticacao(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RespostaAutenticacao_sucesso(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      18 ->
	  d_field_RespostaAutenticacao_papel(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RespostaAutenticacao(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_RespostaAutenticacao(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_RespostaAutenticacao(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_RespostaAutenticacao(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_RespostaAutenticacao(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_RespostaAutenticacao(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'RespostaAutenticacao'{sucesso = F@_1, papel = F@_2}.

d_field_RespostaAutenticacao_sucesso(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RespostaAutenticacao_sucesso(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_RespostaAutenticacao_sucesso(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_RespostaAutenticacao(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

d_field_RespostaAutenticacao_papel(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RespostaAutenticacao_papel(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_RespostaAutenticacao_papel(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RespostaAutenticacao(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

skip_varint_RespostaAutenticacao(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_RespostaAutenticacao(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_RespostaAutenticacao(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RespostaAutenticacao(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_RespostaAutenticacao(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RespostaAutenticacao(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_RespostaAutenticacao(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RespostaAutenticacao(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_RespostaAutenticacao(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RespostaAutenticacao(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_RespostaAutenticacao(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RespostaAutenticacao(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_RespostaAutenticacao(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RespostaAutenticacao(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_MensagemEmpresa(Bin, TrUserData) ->
    dfp_read_field_def_MensagemEmpresa(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MensagemEmpresa(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_MensagemEmpresa_tipo(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_MensagemEmpresa(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_MensagemEmpresa_leilao(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_MensagemEmpresa(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_MensagemEmpresa_emissao(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MensagemEmpresa(<<34, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_MensagemEmpresa_utilizador(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MensagemEmpresa(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, _) ->
    #'MensagemEmpresa'{tipo = F@_1, leilao = F@_2,
		       emissao = F@_3, utilizador = F@_4};
dfp_read_field_def_MensagemEmpresa(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_MensagemEmpresa(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_MensagemEmpresa(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MensagemEmpresa(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
dg_read_field_def_MensagemEmpresa(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MensagemEmpresa_tipo(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      18 ->
	  d_field_MensagemEmpresa_leilao(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      26 ->
	  d_field_MensagemEmpresa_emissao(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      34 ->
	  d_field_MensagemEmpresa_utilizador(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MensagemEmpresa(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_MensagemEmpresa(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    2 ->
		skip_length_delimited_MensagemEmpresa(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4,
						      TrUserData);
	    3 ->
		skip_group_MensagemEmpresa(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_MensagemEmpresa(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData)
	  end
    end;
dg_read_field_def_MensagemEmpresa(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #'MensagemEmpresa'{tipo = F@_1, leilao = F@_2,
		       emissao = F@_3, utilizador = F@_4}.

d_field_MensagemEmpresa_tipo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MensagemEmpresa_tipo(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_MensagemEmpresa_tipo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_TipoMensagem(begin
						   <<Res:32/signed-native>> =
						       <<(X bsl N +
							    Acc):32/unsigned-native>>,
						   id(Res, TrUserData)
						 end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_MensagemEmpresa(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_MensagemEmpresa_leilao(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MensagemEmpresa_leilao(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
d_field_MensagemEmpresa_leilao(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_CriacaoLeilao(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MensagemEmpresa(RestF, 0, 0, F@_1,
				       if Prev == undefined -> NewFValue;
					  true ->
					      merge_msg_CriacaoLeilao(Prev,
								      NewFValue,
								      TrUserData)
				       end,
				       F@_3, F@_4, TrUserData).

d_field_MensagemEmpresa_emissao(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MensagemEmpresa_emissao(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_MensagemEmpresa_emissao(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_EmissaoTaxaFixa(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MensagemEmpresa(RestF, 0, 0, F@_1,
				       F@_2,
				       if Prev == undefined -> NewFValue;
					  true ->
					      merge_msg_EmissaoTaxaFixa(Prev,
									NewFValue,
									TrUserData)
				       end,
				       F@_4, TrUserData).

d_field_MensagemEmpresa_utilizador(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MensagemEmpresa_utilizador(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_MensagemEmpresa_utilizador(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MensagemEmpresa(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, TrUserData).

skip_varint_MensagemEmpresa(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_MensagemEmpresa(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
skip_varint_MensagemEmpresa(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MensagemEmpresa(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_MensagemEmpresa(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    skip_length_delimited_MensagemEmpresa(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
skip_length_delimited_MensagemEmpresa(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MensagemEmpresa(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_group_MensagemEmpresa(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MensagemEmpresa(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_32_MensagemEmpresa(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MensagemEmpresa(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_64_MensagemEmpresa(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MensagemEmpresa(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

decode_msg_CriacaoLeilao(Bin, TrUserData) ->
    dfp_read_field_def_CriacaoLeilao(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_CriacaoLeilao(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, TrUserData) ->
    d_field_CriacaoLeilao_montante(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_CriacaoLeilao(<<21, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_CriacaoLeilao_taxa(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_CriacaoLeilao(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #'CriacaoLeilao'{montante = F@_1, taxa = F@_2};
dfp_read_field_def_CriacaoLeilao(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_CriacaoLeilao(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_CriacaoLeilao(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CriacaoLeilao(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_CriacaoLeilao(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CriacaoLeilao_montante(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      21 ->
	  d_field_CriacaoLeilao_taxa(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CriacaoLeilao(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_CriacaoLeilao(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_CriacaoLeilao(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_CriacaoLeilao(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_CriacaoLeilao(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_CriacaoLeilao(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'CriacaoLeilao'{montante = F@_1, taxa = F@_2}.

d_field_CriacaoLeilao_montante(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CriacaoLeilao_montante(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_CriacaoLeilao_montante(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_CriacaoLeilao(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_CriacaoLeilao_taxa(<<0:16, 128, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_CriacaoLeilao(Rest, Z1, Z2, F@_1,
				     id(infinity, TrUserData), TrUserData);
d_field_CriacaoLeilao_taxa(<<0:16, 128, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_CriacaoLeilao(Rest, Z1, Z2, F@_1,
				     id('-infinity', TrUserData), TrUserData);
d_field_CriacaoLeilao_taxa(<<_:16, 1:1, _:7, _:1, 127:7,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_CriacaoLeilao(Rest, Z1, Z2, F@_1,
				     id(nan, TrUserData), TrUserData);
d_field_CriacaoLeilao_taxa(<<Value:32/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_CriacaoLeilao(Rest, Z1, Z2, F@_1,
				     id(Value, TrUserData), TrUserData).

skip_varint_CriacaoLeilao(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_CriacaoLeilao(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_CriacaoLeilao(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CriacaoLeilao(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_CriacaoLeilao(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CriacaoLeilao(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_CriacaoLeilao(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CriacaoLeilao(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_CriacaoLeilao(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CriacaoLeilao(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_CriacaoLeilao(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CriacaoLeilao(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_CriacaoLeilao(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CriacaoLeilao(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_EmissaoTaxaFixa(Bin, TrUserData) ->
    dfp_read_field_def_EmissaoTaxaFixa(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_EmissaoTaxaFixa(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_EmissaoTaxaFixa_montante(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_EmissaoTaxaFixa(<<>>, 0, 0, F@_1,
				   _) ->
    #'EmissaoTaxaFixa'{montante = F@_1};
dfp_read_field_def_EmissaoTaxaFixa(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_EmissaoTaxaFixa(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_EmissaoTaxaFixa(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EmissaoTaxaFixa(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_EmissaoTaxaFixa(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_EmissaoTaxaFixa_montante(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EmissaoTaxaFixa(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_EmissaoTaxaFixa(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_EmissaoTaxaFixa(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_EmissaoTaxaFixa(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_EmissaoTaxaFixa(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_EmissaoTaxaFixa(<<>>, 0, 0, F@_1,
				  _) ->
    #'EmissaoTaxaFixa'{montante = F@_1}.

d_field_EmissaoTaxaFixa_montante(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_EmissaoTaxaFixa_montante(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_EmissaoTaxaFixa_montante(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_EmissaoTaxaFixa(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_EmissaoTaxaFixa(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_EmissaoTaxaFixa(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_EmissaoTaxaFixa(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_EmissaoTaxaFixa(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_EmissaoTaxaFixa(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_EmissaoTaxaFixa(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_EmissaoTaxaFixa(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EmissaoTaxaFixa(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_EmissaoTaxaFixa(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EmissaoTaxaFixa(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_EmissaoTaxaFixa(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_EmissaoTaxaFixa(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_EmissaoTaxaFixa(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_EmissaoTaxaFixa(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_MensagemInvestidor(Bin, TrUserData) ->
    dfp_read_field_def_MensagemInvestidor(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_MensagemInvestidor(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_MensagemInvestidor_tipo(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MensagemInvestidor(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_MensagemInvestidor_leilao(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MensagemInvestidor(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_MensagemInvestidor_emissao(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MensagemInvestidor(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_MensagemInvestidor_utilizador(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_MensagemInvestidor(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, _) ->
    #'MensagemInvestidor'{tipo = F@_1, leilao = F@_2,
			  emissao = F@_3, utilizador = F@_4};
dfp_read_field_def_MensagemInvestidor(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_MensagemInvestidor(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_MensagemInvestidor(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MensagemInvestidor(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
dg_read_field_def_MensagemInvestidor(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MensagemInvestidor_tipo(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      18 ->
	  d_field_MensagemInvestidor_leilao(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      26 ->
	  d_field_MensagemInvestidor_emissao(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      34 ->
	  d_field_MensagemInvestidor_utilizador(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MensagemInvestidor(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_MensagemInvestidor(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    2 ->
		skip_length_delimited_MensagemInvestidor(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
	    3 ->
		skip_group_MensagemInvestidor(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_MensagemInvestidor(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData)
	  end
    end;
dg_read_field_def_MensagemInvestidor(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, _) ->
    #'MensagemInvestidor'{tipo = F@_1, leilao = F@_2,
			  emissao = F@_3, utilizador = F@_4}.

d_field_MensagemInvestidor_tipo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MensagemInvestidor_tipo(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_MensagemInvestidor_tipo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_TipoMensagem(begin
						   <<Res:32/signed-native>> =
						       <<(X bsl N +
							    Acc):32/unsigned-native>>,
						   id(Res, TrUserData)
						 end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_MensagemInvestidor(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4,
					  TrUserData).

d_field_MensagemInvestidor_leilao(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MensagemInvestidor_leilao(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_MensagemInvestidor_leilao(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_LicitacaoLeilao(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MensagemInvestidor(RestF, 0, 0, F@_1,
					  if Prev == undefined -> NewFValue;
					     true ->
						 merge_msg_LicitacaoLeilao(Prev,
									   NewFValue,
									   TrUserData)
					  end,
					  F@_3, F@_4, TrUserData).

d_field_MensagemInvestidor_emissao(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MensagemInvestidor_emissao(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_MensagemInvestidor_emissao(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, Prev, F@_4,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_SubscricaoTaxaFixa(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MensagemInvestidor(RestF, 0, 0, F@_1,
					  F@_2,
					  if Prev == undefined -> NewFValue;
					     true ->
						 merge_msg_SubscricaoTaxaFixa(Prev,
									      NewFValue,
									      TrUserData)
					  end,
					  F@_4, TrUserData).

d_field_MensagemInvestidor_utilizador(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    d_field_MensagemInvestidor_utilizador(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
d_field_MensagemInvestidor_utilizador(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, _,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MensagemInvestidor(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, TrUserData).

skip_varint_MensagemInvestidor(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_MensagemInvestidor(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
skip_varint_MensagemInvestidor(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MensagemInvestidor(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_MensagemInvestidor(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_MensagemInvestidor(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
skip_length_delimited_MensagemInvestidor(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MensagemInvestidor(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_group_MensagemInvestidor(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MensagemInvestidor(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_32_MensagemInvestidor(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MensagemInvestidor(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_MensagemInvestidor(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MensagemInvestidor(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_LicitacaoLeilao(Bin, TrUserData) ->
    dfp_read_field_def_LicitacaoLeilao(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LicitacaoLeilao(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LicitacaoLeilao_empresa(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_LicitacaoLeilao(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LicitacaoLeilao_montante(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_LicitacaoLeilao(<<29, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LicitacaoLeilao_taxa(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_LicitacaoLeilao(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, _) ->
    #'LicitacaoLeilao'{empresa = F@_1, montante = F@_2,
		       taxa = F@_3};
dfp_read_field_def_LicitacaoLeilao(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData) ->
    dg_read_field_def_LicitacaoLeilao(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

dg_read_field_def_LicitacaoLeilao(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LicitacaoLeilao(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
dg_read_field_def_LicitacaoLeilao(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LicitacaoLeilao_empresa(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      16 ->
	  d_field_LicitacaoLeilao_montante(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      29 ->
	  d_field_LicitacaoLeilao_taxa(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LicitacaoLeilao(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    1 ->
		skip_64_LicitacaoLeilao(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    2 ->
		skip_length_delimited_LicitacaoLeilao(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_LicitacaoLeilao(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_LicitacaoLeilao(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData)
	  end
    end;
dg_read_field_def_LicitacaoLeilao(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, _) ->
    #'LicitacaoLeilao'{empresa = F@_1, montante = F@_2,
		       taxa = F@_3}.

d_field_LicitacaoLeilao_empresa(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LicitacaoLeilao_empresa(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_LicitacaoLeilao_empresa(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LicitacaoLeilao(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, TrUserData).

d_field_LicitacaoLeilao_montante(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LicitacaoLeilao_montante(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_LicitacaoLeilao_montante(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_LicitacaoLeilao(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, TrUserData).

d_field_LicitacaoLeilao_taxa(<<0:16, 128, 127,
			       Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_LicitacaoLeilao(Rest, Z1, Z2, F@_1,
				       F@_2, id(infinity, TrUserData),
				       TrUserData);
d_field_LicitacaoLeilao_taxa(<<0:16, 128, 255,
			       Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_LicitacaoLeilao(Rest, Z1, Z2, F@_1,
				       F@_2, id('-infinity', TrUserData),
				       TrUserData);
d_field_LicitacaoLeilao_taxa(<<_:16, 1:1, _:7, _:1,
			       127:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_LicitacaoLeilao(Rest, Z1, Z2, F@_1,
				       F@_2, id(nan, TrUserData), TrUserData);
d_field_LicitacaoLeilao_taxa(<<Value:32/little-float,
			       Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_LicitacaoLeilao(Rest, Z1, Z2, F@_1,
				       F@_2, id(Value, TrUserData), TrUserData).

skip_varint_LicitacaoLeilao(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_LicitacaoLeilao(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
skip_varint_LicitacaoLeilao(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LicitacaoLeilao(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_length_delimited_LicitacaoLeilao(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_LicitacaoLeilao(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
skip_length_delimited_LicitacaoLeilao(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LicitacaoLeilao(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, TrUserData).

skip_group_LicitacaoLeilao(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LicitacaoLeilao(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_32_LicitacaoLeilao(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LicitacaoLeilao(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_64_LicitacaoLeilao(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LicitacaoLeilao(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

decode_msg_SubscricaoTaxaFixa(Bin, TrUserData) ->
    dfp_read_field_def_SubscricaoTaxaFixa(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_SubscricaoTaxaFixa(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_SubscricaoTaxaFixa_empresa(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_SubscricaoTaxaFixa(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_SubscricaoTaxaFixa_montante(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_SubscricaoTaxaFixa(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #'SubscricaoTaxaFixa'{empresa = F@_1, montante = F@_2};
dfp_read_field_def_SubscricaoTaxaFixa(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_SubscricaoTaxaFixa(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_SubscricaoTaxaFixa(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SubscricaoTaxaFixa(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_SubscricaoTaxaFixa(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SubscricaoTaxaFixa_empresa(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      16 ->
	  d_field_SubscricaoTaxaFixa_montante(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SubscricaoTaxaFixa(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_SubscricaoTaxaFixa(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_SubscricaoTaxaFixa(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_SubscricaoTaxaFixa(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_SubscricaoTaxaFixa(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_SubscricaoTaxaFixa(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'SubscricaoTaxaFixa'{empresa = F@_1, montante = F@_2}.

d_field_SubscricaoTaxaFixa_empresa(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SubscricaoTaxaFixa_empresa(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_SubscricaoTaxaFixa_empresa(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SubscricaoTaxaFixa(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_SubscricaoTaxaFixa_montante(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SubscricaoTaxaFixa_montante(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_SubscricaoTaxaFixa_montante(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_SubscricaoTaxaFixa(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

skip_varint_SubscricaoTaxaFixa(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_SubscricaoTaxaFixa(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_SubscricaoTaxaFixa(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SubscricaoTaxaFixa(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_SubscricaoTaxaFixa(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_SubscricaoTaxaFixa(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_SubscricaoTaxaFixa(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SubscricaoTaxaFixa(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_SubscricaoTaxaFixa(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SubscricaoTaxaFixa(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_SubscricaoTaxaFixa(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SubscricaoTaxaFixa(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_SubscricaoTaxaFixa(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SubscricaoTaxaFixa(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_NotificacaoUltrapassado(Bin, TrUserData) ->
    dfp_read_field_def_NotificacaoUltrapassado(Bin, 0, 0,
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_NotificacaoUltrapassado(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    d_field_NotificacaoUltrapassado_tipo(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NotificacaoUltrapassado(<<21,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    d_field_NotificacaoUltrapassado_taxa(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NotificacaoUltrapassado(<<24,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    d_field_NotificacaoUltrapassado_valor(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_NotificacaoUltrapassado(<<34,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    d_field_NotificacaoUltrapassado_mensagem(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4,
					     TrUserData);
dfp_read_field_def_NotificacaoUltrapassado(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, _) ->
    #'NotificacaoUltrapassado'{tipo = F@_1, taxa = F@_2,
			       valor = F@_3, mensagem = F@_4};
dfp_read_field_def_NotificacaoUltrapassado(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    dg_read_field_def_NotificacaoUltrapassado(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

dg_read_field_def_NotificacaoUltrapassado(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotificacaoUltrapassado(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
dg_read_field_def_NotificacaoUltrapassado(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_NotificacaoUltrapassado_tipo(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      21 ->
	  d_field_NotificacaoUltrapassado_taxa(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      24 ->
	  d_field_NotificacaoUltrapassado_valor(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      34 ->
	  d_field_NotificacaoUltrapassado_mensagem(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NotificacaoUltrapassado(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    1 ->
		skip_64_NotificacaoUltrapassado(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    2 ->
		skip_length_delimited_NotificacaoUltrapassado(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
	    3 ->
		skip_group_NotificacaoUltrapassado(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
	    5 ->
		skip_32_NotificacaoUltrapassado(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_NotificacaoUltrapassado(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, _) ->
    #'NotificacaoUltrapassado'{tipo = F@_1, taxa = F@_2,
			       valor = F@_3, mensagem = F@_4}.

d_field_NotificacaoUltrapassado_tipo(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_NotificacaoUltrapassado_tipo(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_field_NotificacaoUltrapassado_tipo(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_TipoMensagem(begin
						   <<Res:32/signed-native>> =
						       <<(X bsl N +
							    Acc):32/unsigned-native>>,
						   id(Res, TrUserData)
						 end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_NotificacaoUltrapassado(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       TrUserData).

d_field_NotificacaoUltrapassado_taxa(<<0:16, 128, 127,
				       Rest/binary>>,
				     Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_NotificacaoUltrapassado(Rest, Z1, Z2,
					       F@_1, id(infinity, TrUserData),
					       F@_3, F@_4, TrUserData);
d_field_NotificacaoUltrapassado_taxa(<<0:16, 128, 255,
				       Rest/binary>>,
				     Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_NotificacaoUltrapassado(Rest, Z1, Z2,
					       F@_1,
					       id('-infinity', TrUserData),
					       F@_3, F@_4, TrUserData);
d_field_NotificacaoUltrapassado_taxa(<<_:16, 1:1, _:7,
				       _:1, 127:7, Rest/binary>>,
				     Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_NotificacaoUltrapassado(Rest, Z1, Z2,
					       F@_1, id(nan, TrUserData), F@_3,
					       F@_4, TrUserData);
d_field_NotificacaoUltrapassado_taxa(<<Value:32/little-float,
				       Rest/binary>>,
				     Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_NotificacaoUltrapassado(Rest, Z1, Z2,
					       F@_1, id(Value, TrUserData),
					       F@_3, F@_4, TrUserData).

d_field_NotificacaoUltrapassado_valor(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    d_field_NotificacaoUltrapassado_valor(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
d_field_NotificacaoUltrapassado_valor(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_NotificacaoUltrapassado(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       TrUserData).

d_field_NotificacaoUltrapassado_mensagem(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    d_field_NotificacaoUltrapassado_mensagem(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
d_field_NotificacaoUltrapassado_mensagem(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, _,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NotificacaoUltrapassado(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       TrUserData).

skip_varint_NotificacaoUltrapassado(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    skip_varint_NotificacaoUltrapassado(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
skip_varint_NotificacaoUltrapassado(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    dfp_read_field_def_NotificacaoUltrapassado(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

skip_length_delimited_NotificacaoUltrapassado(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    skip_length_delimited_NotificacaoUltrapassado(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_NotificacaoUltrapassado(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotificacaoUltrapassado(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

skip_group_NotificacaoUltrapassado(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotificacaoUltrapassado(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

skip_32_NotificacaoUltrapassado(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_NotificacaoUltrapassado(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

skip_64_NotificacaoUltrapassado(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_NotificacaoUltrapassado(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

decode_msg_Resultado(Bin, TrUserData) ->
    dfp_read_field_def_Resultado(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Resultado(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Resultado_tipo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_Resultado(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Resultado_empresa(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_Resultado(<<26, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Resultado_texto(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_Resultado(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #'Resultado'{tipo = F@_1, empresa = F@_2, texto = F@_3};
dfp_read_field_def_Resultado(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_Resultado(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_Resultado(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Resultado(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Resultado(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Resultado_tipo(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      18 ->
	  d_field_Resultado_empresa(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      26 ->
	  d_field_Resultado_texto(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Resultado(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_Resultado(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_Resultado(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_Resultado(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_Resultado(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_Resultado(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'Resultado'{tipo = F@_1, empresa = F@_2, texto = F@_3}.

d_field_Resultado_tipo(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Resultado_tipo(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_Resultado_tipo(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_TipoMensagem(begin
						   <<Res:32/signed-native>> =
						       <<(X bsl N +
							    Acc):32/unsigned-native>>,
						   id(Res, TrUserData)
						 end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Resultado(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_Resultado_empresa(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Resultado_empresa(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_Resultado_empresa(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Resultado(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_Resultado_texto(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Resultado_texto(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_Resultado_texto(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Resultado(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, TrUserData).

skip_varint_Resultado(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Resultado(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_Resultado(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Resultado(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_Resultado(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Resultado(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_Resultado(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Resultado(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_Resultado(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Resultado(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_Resultado(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Resultado(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_Resultado(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Resultado(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

d_enum_TipoMensagem(1) -> 'LEILAO';
d_enum_TipoMensagem(2) -> 'EMISSAO';
d_enum_TipoMensagem(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Autenticacao' ->
	  merge_msg_Autenticacao(Prev, New, TrUserData);
      'RespostaAutenticacao' ->
	  merge_msg_RespostaAutenticacao(Prev, New, TrUserData);
      'MensagemEmpresa' ->
	  merge_msg_MensagemEmpresa(Prev, New, TrUserData);
      'CriacaoLeilao' ->
	  merge_msg_CriacaoLeilao(Prev, New, TrUserData);
      'EmissaoTaxaFixa' ->
	  merge_msg_EmissaoTaxaFixa(Prev, New, TrUserData);
      'MensagemInvestidor' ->
	  merge_msg_MensagemInvestidor(Prev, New, TrUserData);
      'LicitacaoLeilao' ->
	  merge_msg_LicitacaoLeilao(Prev, New, TrUserData);
      'SubscricaoTaxaFixa' ->
	  merge_msg_SubscricaoTaxaFixa(Prev, New, TrUserData);
      'NotificacaoUltrapassado' ->
	  merge_msg_NotificacaoUltrapassado(Prev, New,
					    TrUserData);
      'Resultado' ->
	  merge_msg_Resultado(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Autenticacao/3}).
merge_msg_Autenticacao(#'Autenticacao'{},
		       #'Autenticacao'{username = NFusername,
				       password = NFpassword},
		       _) ->
    #'Autenticacao'{username = NFusername,
		    password = NFpassword}.

-compile({nowarn_unused_function,merge_msg_RespostaAutenticacao/3}).
merge_msg_RespostaAutenticacao(#'RespostaAutenticacao'{papel
							   = PFpapel},
			       #'RespostaAutenticacao'{sucesso = NFsucesso,
						       papel = NFpapel},
			       _) ->
    #'RespostaAutenticacao'{sucesso = NFsucesso,
			    papel =
				if NFpapel =:= undefined -> PFpapel;
				   true -> NFpapel
				end}.

-compile({nowarn_unused_function,merge_msg_MensagemEmpresa/3}).
merge_msg_MensagemEmpresa(#'MensagemEmpresa'{leilao =
						 PFleilao,
					     emissao = PFemissao},
			  #'MensagemEmpresa'{tipo = NFtipo, leilao = NFleilao,
					     emissao = NFemissao,
					     utilizador = NFutilizador},
			  TrUserData) ->
    #'MensagemEmpresa'{tipo = NFtipo,
		       leilao =
			   if PFleilao /= undefined, NFleilao /= undefined ->
				  merge_msg_CriacaoLeilao(PFleilao, NFleilao,
							  TrUserData);
			      PFleilao == undefined -> NFleilao;
			      NFleilao == undefined -> PFleilao
			   end,
		       emissao =
			   if PFemissao /= undefined, NFemissao /= undefined ->
				  merge_msg_EmissaoTaxaFixa(PFemissao,
							    NFemissao,
							    TrUserData);
			      PFemissao == undefined -> NFemissao;
			      NFemissao == undefined -> PFemissao
			   end,
		       utilizador = NFutilizador}.

-compile({nowarn_unused_function,merge_msg_CriacaoLeilao/3}).
merge_msg_CriacaoLeilao(#'CriacaoLeilao'{},
			#'CriacaoLeilao'{montante = NFmontante, taxa = NFtaxa},
			_) ->
    #'CriacaoLeilao'{montante = NFmontante, taxa = NFtaxa}.

-compile({nowarn_unused_function,merge_msg_EmissaoTaxaFixa/3}).
merge_msg_EmissaoTaxaFixa(#'EmissaoTaxaFixa'{},
			  #'EmissaoTaxaFixa'{montante = NFmontante}, _) ->
    #'EmissaoTaxaFixa'{montante = NFmontante}.

-compile({nowarn_unused_function,merge_msg_MensagemInvestidor/3}).
merge_msg_MensagemInvestidor(#'MensagemInvestidor'{leilao
						       = PFleilao,
						   emissao = PFemissao},
			     #'MensagemInvestidor'{tipo = NFtipo,
						   leilao = NFleilao,
						   emissao = NFemissao,
						   utilizador = NFutilizador},
			     TrUserData) ->
    #'MensagemInvestidor'{tipo = NFtipo,
			  leilao =
			      if PFleilao /= undefined, NFleilao /= undefined ->
				     merge_msg_LicitacaoLeilao(PFleilao,
							       NFleilao,
							       TrUserData);
				 PFleilao == undefined -> NFleilao;
				 NFleilao == undefined -> PFleilao
			      end,
			  emissao =
			      if PFemissao /= undefined,
				 NFemissao /= undefined ->
				     merge_msg_SubscricaoTaxaFixa(PFemissao,
								  NFemissao,
								  TrUserData);
				 PFemissao == undefined -> NFemissao;
				 NFemissao == undefined -> PFemissao
			      end,
			  utilizador = NFutilizador}.

-compile({nowarn_unused_function,merge_msg_LicitacaoLeilao/3}).
merge_msg_LicitacaoLeilao(#'LicitacaoLeilao'{},
			  #'LicitacaoLeilao'{empresa = NFempresa,
					     montante = NFmontante,
					     taxa = NFtaxa},
			  _) ->
    #'LicitacaoLeilao'{empresa = NFempresa,
		       montante = NFmontante, taxa = NFtaxa}.

-compile({nowarn_unused_function,merge_msg_SubscricaoTaxaFixa/3}).
merge_msg_SubscricaoTaxaFixa(#'SubscricaoTaxaFixa'{},
			     #'SubscricaoTaxaFixa'{empresa = NFempresa,
						   montante = NFmontante},
			     _) ->
    #'SubscricaoTaxaFixa'{empresa = NFempresa,
			  montante = NFmontante}.

-compile({nowarn_unused_function,merge_msg_NotificacaoUltrapassado/3}).
merge_msg_NotificacaoUltrapassado(#'NotificacaoUltrapassado'{mensagem
								 = PFmensagem},
				  #'NotificacaoUltrapassado'{tipo = NFtipo,
							     taxa = NFtaxa,
							     valor = NFvalor,
							     mensagem =
								 NFmensagem},
				  _) ->
    #'NotificacaoUltrapassado'{tipo = NFtipo, taxa = NFtaxa,
			       valor = NFvalor,
			       mensagem =
				   if NFmensagem =:= undefined -> PFmensagem;
				      true -> NFmensagem
				   end}.

-compile({nowarn_unused_function,merge_msg_Resultado/3}).
merge_msg_Resultado(#'Resultado'{},
		    #'Resultado'{tipo = NFtipo, empresa = NFempresa,
				 texto = NFtexto},
		    _) ->
    #'Resultado'{tipo = NFtipo, empresa = NFempresa,
		 texto = NFtexto}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Autenticacao' ->
	  v_msg_Autenticacao(Msg, [MsgName], TrUserData);
      'RespostaAutenticacao' ->
	  v_msg_RespostaAutenticacao(Msg, [MsgName], TrUserData);
      'MensagemEmpresa' ->
	  v_msg_MensagemEmpresa(Msg, [MsgName], TrUserData);
      'CriacaoLeilao' ->
	  v_msg_CriacaoLeilao(Msg, [MsgName], TrUserData);
      'EmissaoTaxaFixa' ->
	  v_msg_EmissaoTaxaFixa(Msg, [MsgName], TrUserData);
      'MensagemInvestidor' ->
	  v_msg_MensagemInvestidor(Msg, [MsgName], TrUserData);
      'LicitacaoLeilao' ->
	  v_msg_LicitacaoLeilao(Msg, [MsgName], TrUserData);
      'SubscricaoTaxaFixa' ->
	  v_msg_SubscricaoTaxaFixa(Msg, [MsgName], TrUserData);
      'NotificacaoUltrapassado' ->
	  v_msg_NotificacaoUltrapassado(Msg, [MsgName],
					TrUserData);
      'Resultado' ->
	  v_msg_Resultado(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Autenticacao/3}).
-dialyzer({nowarn_function,v_msg_Autenticacao/3}).
v_msg_Autenticacao(#'Autenticacao'{username = F1,
				   password = F2},
		   Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_Autenticacao(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Autenticacao'}, X, Path).

-compile({nowarn_unused_function,v_msg_RespostaAutenticacao/3}).
-dialyzer({nowarn_function,v_msg_RespostaAutenticacao/3}).
v_msg_RespostaAutenticacao(#'RespostaAutenticacao'{sucesso
						       = F1,
						   papel = F2},
			   Path, TrUserData) ->
    v_type_bool(F1, [sucesso | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [papel | Path], TrUserData)
    end,
    ok;
v_msg_RespostaAutenticacao(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RespostaAutenticacao'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MensagemEmpresa/3}).
-dialyzer({nowarn_function,v_msg_MensagemEmpresa/3}).
v_msg_MensagemEmpresa(#'MensagemEmpresa'{tipo = F1,
					 leilao = F2, emissao = F3,
					 utilizador = F4},
		      Path, TrUserData) ->
    v_enum_TipoMensagem(F1, [tipo | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   v_msg_CriacaoLeilao(F2, [leilao | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_EmissaoTaxaFixa(F3, [emissao | Path], TrUserData)
    end,
    v_type_string(F4, [utilizador | Path], TrUserData),
    ok;
v_msg_MensagemEmpresa(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MensagemEmpresa'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_CriacaoLeilao/3}).
-dialyzer({nowarn_function,v_msg_CriacaoLeilao/3}).
v_msg_CriacaoLeilao(#'CriacaoLeilao'{montante = F1,
				     taxa = F2},
		    Path, TrUserData) ->
    v_type_int64(F1, [montante | Path], TrUserData),
    v_type_float(F2, [taxa | Path], TrUserData),
    ok;
v_msg_CriacaoLeilao(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CriacaoLeilao'}, X, Path).

-compile({nowarn_unused_function,v_msg_EmissaoTaxaFixa/3}).
-dialyzer({nowarn_function,v_msg_EmissaoTaxaFixa/3}).
v_msg_EmissaoTaxaFixa(#'EmissaoTaxaFixa'{montante = F1},
		      Path, TrUserData) ->
    v_type_int64(F1, [montante | Path], TrUserData), ok;
v_msg_EmissaoTaxaFixa(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EmissaoTaxaFixa'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MensagemInvestidor/3}).
-dialyzer({nowarn_function,v_msg_MensagemInvestidor/3}).
v_msg_MensagemInvestidor(#'MensagemInvestidor'{tipo =
						   F1,
					       leilao = F2, emissao = F3,
					       utilizador = F4},
			 Path, TrUserData) ->
    v_enum_TipoMensagem(F1, [tipo | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   v_msg_LicitacaoLeilao(F2, [leilao | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_SubscricaoTaxaFixa(F3, [emissao | Path],
				    TrUserData)
    end,
    v_type_string(F4, [utilizador | Path], TrUserData),
    ok;
v_msg_MensagemInvestidor(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MensagemInvestidor'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_LicitacaoLeilao/3}).
-dialyzer({nowarn_function,v_msg_LicitacaoLeilao/3}).
v_msg_LicitacaoLeilao(#'LicitacaoLeilao'{empresa = F1,
					 montante = F2, taxa = F3},
		      Path, TrUserData) ->
    v_type_string(F1, [empresa | Path], TrUserData),
    v_type_int64(F2, [montante | Path], TrUserData),
    v_type_float(F3, [taxa | Path], TrUserData),
    ok;
v_msg_LicitacaoLeilao(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LicitacaoLeilao'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_SubscricaoTaxaFixa/3}).
-dialyzer({nowarn_function,v_msg_SubscricaoTaxaFixa/3}).
v_msg_SubscricaoTaxaFixa(#'SubscricaoTaxaFixa'{empresa =
						   F1,
					       montante = F2},
			 Path, TrUserData) ->
    v_type_string(F1, [empresa | Path], TrUserData),
    v_type_int64(F2, [montante | Path], TrUserData),
    ok;
v_msg_SubscricaoTaxaFixa(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SubscricaoTaxaFixa'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_NotificacaoUltrapassado/3}).
-dialyzer({nowarn_function,v_msg_NotificacaoUltrapassado/3}).
v_msg_NotificacaoUltrapassado(#'NotificacaoUltrapassado'{tipo
							     = F1,
							 taxa = F2, valor = F3,
							 mensagem = F4},
			      Path, TrUserData) ->
    v_enum_TipoMensagem(F1, [tipo | Path], TrUserData),
    v_type_float(F2, [taxa | Path], TrUserData),
    v_type_int64(F3, [valor | Path], TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [mensagem | Path], TrUserData)
    end,
    ok;
v_msg_NotificacaoUltrapassado(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'NotificacaoUltrapassado'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_Resultado/3}).
-dialyzer({nowarn_function,v_msg_Resultado/3}).
v_msg_Resultado(#'Resultado'{tipo = F1, empresa = F2,
			     texto = F3},
		Path, TrUserData) ->
    v_enum_TipoMensagem(F1, [tipo | Path], TrUserData),
    v_type_string(F2, [empresa | Path], TrUserData),
    v_type_string(F3, [texto | Path], TrUserData),
    ok;
v_msg_Resultado(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Resultado'}, X, Path).

-compile({nowarn_unused_function,v_enum_TipoMensagem/3}).
-dialyzer({nowarn_function,v_enum_TipoMensagem/3}).
v_enum_TipoMensagem('LEILAO', _Path, _TrUserData) -> ok;
v_enum_TipoMensagem('EMISSAO', _Path, _TrUserData) ->
    ok;
v_enum_TipoMensagem(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_TipoMensagem(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'TipoMensagem'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'TipoMensagem'},
      [{'LEILAO', 1}, {'EMISSAO', 2}]},
     {{msg, 'Autenticacao'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'RespostaAutenticacao'},
      [#field{name = sucesso, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = papel, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'MensagemEmpresa'},
      [#field{name = tipo, fnum = 1, rnum = 2,
	      type = {enum, 'TipoMensagem'}, occurrence = required,
	      opts = [{default, 'LEILAO'}]},
       #field{name = leilao, fnum = 2, rnum = 3,
	      type = {msg, 'CriacaoLeilao'}, occurrence = optional,
	      opts = []},
       #field{name = emissao, fnum = 3, rnum = 4,
	      type = {msg, 'EmissaoTaxaFixa'}, occurrence = optional,
	      opts = []},
       #field{name = utilizador, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'CriacaoLeilao'},
      [#field{name = montante, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []},
       #field{name = taxa, fnum = 2, rnum = 3, type = float,
	      occurrence = required, opts = []}]},
     {{msg, 'EmissaoTaxaFixa'},
      [#field{name = montante, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []}]},
     {{msg, 'MensagemInvestidor'},
      [#field{name = tipo, fnum = 1, rnum = 2,
	      type = {enum, 'TipoMensagem'}, occurrence = required,
	      opts = [{default, 'LEILAO'}]},
       #field{name = leilao, fnum = 2, rnum = 3,
	      type = {msg, 'LicitacaoLeilao'}, occurrence = optional,
	      opts = []},
       #field{name = emissao, fnum = 3, rnum = 4,
	      type = {msg, 'SubscricaoTaxaFixa'},
	      occurrence = optional, opts = []},
       #field{name = utilizador, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'LicitacaoLeilao'},
      [#field{name = empresa, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = montante, fnum = 2, rnum = 3,
	      type = int64, occurrence = required, opts = []},
       #field{name = taxa, fnum = 3, rnum = 4, type = float,
	      occurrence = required, opts = []}]},
     {{msg, 'SubscricaoTaxaFixa'},
      [#field{name = empresa, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = montante, fnum = 2, rnum = 3,
	      type = int64, occurrence = required, opts = []}]},
     {{msg, 'NotificacaoUltrapassado'},
      [#field{name = tipo, fnum = 1, rnum = 2,
	      type = {enum, 'TipoMensagem'}, occurrence = required,
	      opts = [{default, 'LEILAO'}]},
       #field{name = taxa, fnum = 2, rnum = 3, type = float,
	      occurrence = required, opts = []},
       #field{name = valor, fnum = 3, rnum = 4, type = int64,
	      occurrence = required, opts = []},
       #field{name = mensagem, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Resultado'},
      [#field{name = tipo, fnum = 1, rnum = 2,
	      type = {enum, 'TipoMensagem'}, occurrence = required,
	      opts = [{default, 'LEILAO'}]},
       #field{name = empresa, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = texto, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['Autenticacao', 'RespostaAutenticacao',
     'MensagemEmpresa', 'CriacaoLeilao', 'EmissaoTaxaFixa',
     'MensagemInvestidor', 'LicitacaoLeilao',
     'SubscricaoTaxaFixa', 'NotificacaoUltrapassado',
     'Resultado'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Autenticacao', 'RespostaAutenticacao',
     'MensagemEmpresa', 'CriacaoLeilao', 'EmissaoTaxaFixa',
     'MensagemInvestidor', 'LicitacaoLeilao',
     'SubscricaoTaxaFixa', 'NotificacaoUltrapassado',
     'Resultado'].


get_enum_names() -> ['TipoMensagem'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Autenticacao') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('RespostaAutenticacao') ->
    [#field{name = sucesso, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = papel, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('MensagemEmpresa') ->
    [#field{name = tipo, fnum = 1, rnum = 2,
	    type = {enum, 'TipoMensagem'}, occurrence = required,
	    opts = [{default, 'LEILAO'}]},
     #field{name = leilao, fnum = 2, rnum = 3,
	    type = {msg, 'CriacaoLeilao'}, occurrence = optional,
	    opts = []},
     #field{name = emissao, fnum = 3, rnum = 4,
	    type = {msg, 'EmissaoTaxaFixa'}, occurrence = optional,
	    opts = []},
     #field{name = utilizador, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []}];
find_msg_def('CriacaoLeilao') ->
    [#field{name = montante, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []},
     #field{name = taxa, fnum = 2, rnum = 3, type = float,
	    occurrence = required, opts = []}];
find_msg_def('EmissaoTaxaFixa') ->
    [#field{name = montante, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []}];
find_msg_def('MensagemInvestidor') ->
    [#field{name = tipo, fnum = 1, rnum = 2,
	    type = {enum, 'TipoMensagem'}, occurrence = required,
	    opts = [{default, 'LEILAO'}]},
     #field{name = leilao, fnum = 2, rnum = 3,
	    type = {msg, 'LicitacaoLeilao'}, occurrence = optional,
	    opts = []},
     #field{name = emissao, fnum = 3, rnum = 4,
	    type = {msg, 'SubscricaoTaxaFixa'},
	    occurrence = optional, opts = []},
     #field{name = utilizador, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []}];
find_msg_def('LicitacaoLeilao') ->
    [#field{name = empresa, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = montante, fnum = 2, rnum = 3,
	    type = int64, occurrence = required, opts = []},
     #field{name = taxa, fnum = 3, rnum = 4, type = float,
	    occurrence = required, opts = []}];
find_msg_def('SubscricaoTaxaFixa') ->
    [#field{name = empresa, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = montante, fnum = 2, rnum = 3,
	    type = int64, occurrence = required, opts = []}];
find_msg_def('NotificacaoUltrapassado') ->
    [#field{name = tipo, fnum = 1, rnum = 2,
	    type = {enum, 'TipoMensagem'}, occurrence = required,
	    opts = [{default, 'LEILAO'}]},
     #field{name = taxa, fnum = 2, rnum = 3, type = float,
	    occurrence = required, opts = []},
     #field{name = valor, fnum = 3, rnum = 4, type = int64,
	    occurrence = required, opts = []},
     #field{name = mensagem, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Resultado') ->
    [#field{name = tipo, fnum = 1, rnum = 2,
	    type = {enum, 'TipoMensagem'}, occurrence = required,
	    opts = [{default, 'LEILAO'}]},
     #field{name = empresa, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = texto, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('TipoMensagem') ->
    [{'LEILAO', 1}, {'EMISSAO', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('TipoMensagem', Value) ->
    enum_symbol_by_value_TipoMensagem(Value).


enum_value_by_symbol('TipoMensagem', Sym) ->
    enum_value_by_symbol_TipoMensagem(Sym).


enum_symbol_by_value_TipoMensagem(1) -> 'LEILAO';
enum_symbol_by_value_TipoMensagem(2) -> 'EMISSAO'.


enum_value_by_symbol_TipoMensagem('LEILAO') -> 1;
enum_value_by_symbol_TipoMensagem('EMISSAO') -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.4.1".

gpb_version_as_list() ->
    [4,4,1].
